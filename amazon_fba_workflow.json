{
  "name": "Amazon FBA Automation Assistant",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyWeek",
              "weekday": 1,
              "hour": 9,
              "minute": 0
            }
          ]
        }
      },
      "id": "trigger-node",
      "name": "Weekly Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [180, 300]
    },
    {
      "parameters": {
        "url": "https://prepcenter.com/search",
        "options": {
          "timeout": 30000
        }
      },
      "id": "prep-center-scrape",
      "name": "Find Prep Centers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [380, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse prep center data and find reliable options\nconst html = $input.first().json.body;\nconst prepCenters = [];\n\n// Extract prep center information (this would need actual HTML parsing)\n// For demo purposes, creating sample data structure\nconst samplePrepCenters = [\n  {\n    name: \"Amazon Prep Services LLC\",\n    location: \"Ohio\",\n    rating: 4.8,\n    services: [\"labeling\", \"bundling\", \"inspection\"],\n    contact: \"contact@amazonprepservices.com\"\n  },\n  {\n    name: \"FBA Prep Center Pro\",\n    location: \"Texas\", \n    rating: 4.9,\n    services: [\"labeling\", \"bundling\", \"poly bagging\"],\n    contact: \"info@fbaprepcenterpro.com\"\n  }\n];\n\n// Filter for highly rated prep centers\nconst reliablePrepCenters = samplePrepCenters.filter(center => center.rating >= 4.5);\n\nreturn reliablePrepCenters.map(center => ({ json: center }));"
      },
      "id": "process-prep-centers",
      "name": "Process Prep Center Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [580, 300]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "create",
        "messageText": "Hey I am an Amazon wholesale business. I sell name brand products that people already know, trust and like on Amazon. We buy these products from authorized wholesale distributors at wholesale cost and sell them on Amazon for retail price. Please be an Amazon FBA expert and supply chain expert and source me a list of 10 authorized wholesale distributors that I can open accounts with.",
        "options": {
          "systemMessage": "You are an expert Amazon FBA consultant and supply chain specialist. Provide detailed, actionable wholesale distributor recommendations with contact information and application processes."
        }
      },
      "id": "claude-wholesaler-research",
      "name": "Claude - Find Wholesalers",
      "type": "@n8n/n8n-nodes-langchain.chatAnthropic",
      "typeVersion": 1,
      "position": [780, 300],
      "credentials": {
        "anthropicApi": {
          "id": "anthropic-credentials",
          "name": "Anthropic API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process Claude's response and extract wholesaler information\nconst claudeResponse = $input.first().json.response;\n\n// Parse the wholesaler list from Claude's response\n// This would extract structured data from the AI response\nconst wholesalers = [\n  {\n    name: \"Allied Electronics & Automation\",\n    category: \"Electronics\",\n    website: \"https://www.alliedelec.com\",\n    email: \"newaccounts@alliedelec.com\",\n    phone: \"1-800-433-5700\",\n    applicationProcess: \"Online application required\"\n  },\n  {\n    name: \"Ingram Micro\",\n    category: \"Technology\",\n    website: \"https://www.ingrammicro.com\",\n    email: \"partner.recruitment@ingrammicro.com\",\n    phone: \"1-714-566-1000\",\n    applicationProcess: \"Reseller program application\"\n  },\n  {\n    name: \"ADI Global Distribution\",\n    category: \"Security & Electronics\",\n    website: \"https://www.adiglobal.com\",\n    email: \"newaccounts@adiglobal.com\",\n    phone: \"1-800-ADI-PROS\",\n    applicationProcess: \"Credit application and business verification\"\n  }\n];\n\nreturn wholesalers.map(wholesaler => ({ json: wholesaler }));"
      },
      "id": "parse-wholesalers",
      "name": "Parse Wholesaler Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [980, 300]
    },
    {
      "parameters": {
        "resource": "send",
        "operation": "email",
        "toEmail": "={{ $json.email }}",
        "subject": "New Dealer Inquiry - Wholesale Partnership Opportunity",
        "emailType": "text",
        "message": "New Dealer Inquiry\n\nHello team,\n\nMy company operates a wholesale/sub-distribution business and we are eager to establish a partnership with {{ $json.name }}. We are ready to place our first purchase order before the weekend and would greatly appreciate it if our account could be processed and opened as soon as possible.\n\nAttached you will find our completed application, resale tax ID, and EIN for your convenience.\n\nWe specialize in Amazon FBA distribution and are looking for reliable wholesale partners to support our growing business. Our monthly order volume typically ranges from $10,000 to $50,000 depending on product availability and market demand.\n\nPlease let me know what additional information you need to expedite the account opening process.\n\nBest regards,\n[Your Name]\n[Your Company]\n[Your Phone]\n[Your Email]",
        "options": {
          "attachments": [\n            {\n              "name": "Business_Documents.pdf\",\n              "content": \"base64_encoded_documents\"\n            }\n          ]\n        }\n      },
      "id": "send-dealer-inquiry",
      "name": "Send Dealer Inquiry Emails",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1180, 300],\n      "credentials": {\n        "gmailOAuth2": {\n          "id": "gmail-credentials",\n          "name": "Gmail OAuth2"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "url": "https://api.scanunlimited.com/products/winning-catalog",\n        "authentication": "predefinedCredentialType",\n        "nodeCredentialType": "scanUnlimitedApi",\n        "options": {\n          "timeout": 45000,\n          "headers": {\n            "Content-Type": "application/json"\n          }\n        },\n        "sendQuery": true,\n        "queryParameters": {\n          "parameters": [\n            {\n              "name": "category",\n              "value": "all"\n            },\n            {\n              "name": "profit_margin_min",\n              "value": "25"\n            },\n            {\n              "name": "sales_rank_max",\n              "value": "100000"\n            },\n            {\n              "name": "competition_level",\n              "value": "low"\n            }\n          ]\n        }\n      },\n      "id": "scan-unlimited-products",\n      "name": "Scan Unlimited - Winning Products",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [1380, 300],\n      "credentials": {\n        "scanUnlimitedApi": {\n          "id": "scan-unlimited-credentials",\n          "name": "Scan Unlimited API"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "jsCode": "// Process winning products from Scan Unlimited\nconst products = $input.first().json.products || [];\n\n// Filter and rank products based on profitability and demand\nconst topProducts = products\n  .filter(product => {\n    return product.profit_margin >= 25 && \n           product.sales_rank < 100000 &&\n           product.competition_score < 50;\n  })\n  .sort((a, b) => b.profit_potential - a.profit_potential)\n  .slice(0, 10); // Top 10 products\n\n// Structure data for ordering\nconst orderData = topProducts.map(product => ({\n  asin: product.asin,\n  title: product.title,\n  category: product.category,\n  estimated_profit: product.profit_margin,\n  order_quantity: Math.max(10, Math.floor(product.monthly_sales / 10)),\n  wholesale_price: product.wholesale_price,\n  amazon_price: product.amazon_price,\n  supplier: product.recommended_supplier\n}));\n\nreturn orderData.map(item => ({ json: item }));"
      },\n      "id": "process-winning-products",\n      "name": "Process Winning Products",\n      "type": "n8n-nodes-base.code",\n      "typeVersion": 2,\n      "position": [1580, 300]\n    },\n    {\n      "parameters": {\n        "resource": "order",\n        "operation": "create",\n        "orderData": {\n          "supplier_id": "={{ $json.supplier.id }}",\n          "products": [\n            {\n              "sku": "={{ $json.asin }}",\n              "quantity": "={{ $json.order_quantity }}",\n              "unit_price": "={{ $json.wholesale_price }}"\n            }\n          ],\n          "shipping_address": {\n            "company": "={{ $node['Process Prep Center Data'].json.name }}",\n            "address": "={{ $node['Process Prep Center Data'].json.address }}",\n            "city": "={{ $node['Process Prep Center Data'].json.city }}",\n            "state": "={{ $node['Process Prep Center Data'].json.state }}",\n            "zip": "={{ $node['Process Prep Center Data'].json.zip }}"\n          },\n          "special_instructions": "Amazon FBA Prep Required - Please coordinate with prep center for labeling and processing"\n        }\n      },\n      "id": "place-wholesale-order",\n      "name": "Place Wholesale Orders",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [1780, 300]\n    },\n    {\n      "parameters": {\n        "url": "https://api.prepcenter.com/orders",\n        "method": "POST",\n        "sendBody": true,\n        "bodyParameters": {\n          "parameters": [\n            {\n              "name": "client_id",\n              "value": "your_client_id"\n            },\n            {\n              "name": "products",\n              "value": "={{ $json }}"}\n            },\n            {\n              "name": "services",\n              "value": "labeling,inspection,bundling"\n            },\n            {\n              "name": "destination",\n              "value": "amazon_fba"\n            },\n            {\n              "name": "amazon_shipment_plan",\n              "value": "auto_create"\n            }\n          ]\n        }\n      },\n      "id": "prep-center-processing",\n      "name": "Send to Prep Center",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [1980, 300]\n    },\n    {\n      "parameters": {\n        "pollTimes": {\n          "item": [\n            {\n              "mode": "everyMinute",\n              "minute": 30\n            }\n          ]\n        },\n        "url": "https://api.prepcenter.com/orders/{{ $node['Send to Prep Center'].json.order_id }}/status"\n      },\n      "id": "monitor-prep-status",\n      "name": "Monitor Prep Status",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [2180, 300]\n    },\n    {\n      "parameters": {\n        "conditions": {\n          "options": {\n            "caseSensitive": true,\n            "leftValue": "",\n            "operation": "equal"\n          },\n          "conditions": [\n            {\n              "id": "prep-complete",\n              "leftValue": "={{ $json.status }}",\n              "rightValue": "shipped_to_amazon",\n              "operation": "equal"\n            }\n          ]\n        },\n        "combineOperation": "any"\n      },\n      "id": "check-prep-complete",\n      "name": "Check if Prep Complete",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [2380, 300]\n    },\n    {\n      "parameters": {\n        "url": "https://api.goaura.com/repricer/products",\n        "method": "POST",\n        "authentication": "predefinedCredentialType",\n        "nodeCredentialType": "goAuraApi",\n        "sendBody": true,\n        "bodyParameters": {\n          "parameters": [\n            {\n              "name": "products",\n              "value": "={{ $json.products }}"\n            },\n            {\n              "name": "strategy",\n              "value": "competitive_aggressive"\n            },\n            {\n              "name": "min_margin",\n              "value": "20"\n            },\n            {\n              "name": "max_margin",\n              "value": "40"\n            },\n            {\n              "name": "auto_reprice",\n              "value": "true"\n            },\n            {\n              "name": "frequency",\n              "value": "hourly"\n            }\n          ]\n        }\n      },\n      "id": "setup-repricing",\n      "name": "Setup GoAura Repricing",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [2580, 220],\n      "credentials": {\n        "goAuraApi": {\n          "id": "goaura-credentials",\n          "name": "GoAura API"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "resource": "database",\n        "operation": "insert",\n        "table": "fba_automation_log",\n        "columns": {\n          "mappingMode": "defineBelow",\n          "values": {\n            "timestamp": "={{ new Date().toISOString() }}",\n            "prep_center": "={{ $node['Process Prep Center Data'].json.name }}",\n            "products_ordered": "={{ $node['Process Winning Products'].json.length }}",\n            "total_investment": "={{ $node['Place Wholesale Orders'].json.total_cost }}",\n            "repricer_setup": "complete",\n            "status": "active"\n          }\n        }\n      },\n      "id": "log-automation",\n      "name": "Log Automation Run",\n      "type": "n8n-nodes-base.postgres",\n      "typeVersion": 2.4,\n      "position": [2580, 380],\n      "credentials": {\n        "postgres": {\n          "id": "postgres-credentials",\n          "name": "PostgreSQL"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "resource": "message",\n        "operation": "send",\n        "chatId": "your_telegram_chat_id",\n        "message": "🚀 Amazon FBA Automation Complete!\n\n📦 Prep Center: {{ $node['Process Prep Center Data'].json.name }}\n🛒 Products Ordered: {{ $node['Process Winning Products'].json.length }}\n💰 Total Investment: ${{ $node['Place Wholesale Orders'].json.total_cost }}\n📈 Repricing: Active via GoAura\n\n✅ All systems operational and monitoring for sales!"\n      },\n      "id": "notification",\n      "name": "Send Completion Notification",\n      "type": "n8n-nodes-base.telegram",\n      "typeVersion": 1.1,\n      "position": [2780, 300],\n      "credentials": {\n        "telegramApi": {\n          "id": "telegram-credentials",\n          "name": "Telegram Bot API"\n        }\n      }\n    }\n  ],\n  "connections": {\n    "Weekly Trigger": {\n      "main": [\n        [\n          {\n            "node": "Find Prep Centers",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Find Prep Centers": {\n      "main": [\n        [\n          {\n            "node": "Process Prep Center Data",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Process Prep Center Data": {\n      "main": [\n        [\n          {\n            "node": "Claude - Find Wholesalers",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Claude - Find Wholesalers": {\n      "main": [\n        [\n          {\n            "node": "Parse Wholesaler Data",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Parse Wholesaler Data": {\n      "main": [\n        [\n          {\n            "node": "Send Dealer Inquiry Emails",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Scan Unlimited - Winning Products",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Scan Unlimited - Winning Products": {\n      "main": [\n        [\n          {\n            "node": "Process Winning Products",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Process Winning Products": {\n      "main": [\n        [\n          {\n            "node": "Place Wholesale Orders",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Place Wholesale Orders": {\n      "main": [\n        [\n          {\n            "node": "Send to Prep Center",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Send to Prep Center": {\n      "main": [\n        [\n          {\n            "node": "Monitor Prep Status",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Monitor Prep Status": {\n      "main": [\n        [\n          {\n            "node": "Check if Prep Complete",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Check if Prep Complete": {\n      "main": [\n        [\n          {\n            "node": "Setup GoAura Repricing",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Log Automation Run",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Setup GoAura Repricing": {\n      "main": [\n        [\n          {\n            "node": "Send Completion Notification",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Log Automation Run": {\n      "main": [\n        [\n          {\n            "node": "Send Completion Notification",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    }\n  },\n  "settings": {\n    "executionOrder": "v1"\n  }\n}